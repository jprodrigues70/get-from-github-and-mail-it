#!/usr/bin/env php
<?php

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any our classes "manually". Feels great to relax.
|
*/

require __DIR__ . '/vendor/autoload.php';

$dotenv = Dotenv\Dotenv::createMutable(__DIR__);
$dotenv->safeLoad();

function env($string, $default = '')
{
    return $_ENV[$string] ?? $default;
}

if (!empty($argv) && !empty($argv[1])) {
    $arg = $argv[1];

    $explosion = explode(':', $arg, 2);

    $commandNameParts = explode('-', $explosion[0]);
    $commandNameParts = array_map(function ($item) {
        return ucfirst($item);
    }, $commandNameParts);

    $command = implode('', $commandNameParts);
    $f = null;
    // $f = (!empty($explosion[1])) ? $explosion[1] : null;

    $path = "App\Commands\\$command";
    $params = array_slice($argv, 2);

    $obj = (empty($f)) ? new $path($explosion[0], ...$params) : (new $path())->$f(...$params);
}

// $sender = new App\Sender('a', 'b');
// print_r($sender);
// $app = require_once __DIR__.'/bootstrap/app.php';

// /*
// |--------------------------------------------------------------------------
// | Run The Artisan Application
// |--------------------------------------------------------------------------
// |
// | When we run the console application, the current CLI command will be
// | executed in this console and the response sent back to a terminal
// | or another output device for the developers. Here goes nothing!
// |
// */

// $kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

// $status = $kernel->handle(
//     $input = new Symfony\Component\Console\Input\ArgvInput,
//     new Symfony\Component\Console\Output\ConsoleOutput
// );

// /*
// |--------------------------------------------------------------------------
// | Shutdown The Application
// |--------------------------------------------------------------------------
// |
// | Once Artisan has finished running, we will fire off the shutdown events
// | so that any final work may be done by the application before we shut
// | down the process. This is the last thing to happen to the request.
// |
// */

// $kernel->terminate($input, $status);

// exit($status);
